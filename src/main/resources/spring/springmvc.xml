<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--对于注解的Handler可以单个配置
        实际开发中建议使用组件扫描
    -->
    <!--<bean class="cn.xyz.ssm.controller.ItemsController3"/>-->
    <!--可以扫描Controller、service、……
        这里扫描Controller，指定Controller的包
    -->
    <context:component-scan base-package="cn.xyz.mbs.controller"></context:component-scan>

    <!--静态资源的解析
        包括：js、css、img……
    -->
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/css/**" location="/css/"/>

    <!--使用mvc:annotation-driven代替上边两个注解映射器和注解适配器
        mvc:annotation-driven默认加载很多的参数绑定方法，如json转换解析器就默认加载了。
        如果使用了mvc:annotation-driven就不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
        实际开发中使用mvc:annotation-driven
    -->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven>

    <!--配置jsp视图解析器
        解析jsp视图，默认使用jstl标签，classpath得有jstl的包
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--jsp路径的前缀和后缀-->
        <!--<property name="prefix" value="/WEB-INF/jsp"/>-->
        <!--<property name="suffix" value=".jsp"/>-->
    </bean>

    <!--自定义参数绑定，注入自己写的转换器-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <list>
                <!--各种类型转换-->
                <bean class="cn.xyz.mbs.controller.converter.CustomerDateDonverter"/>
            </list>
        </property>
    </bean>

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!--hibernate校验器-->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!--指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessage.properties-->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!--资源名-->
        <property name="basenames">
            <list>
                <value>classpath:CustomValidationMessages</value>
            </list>
        </property>
        <!--资源文件编码格式-->
        <property name="fileEncodings" value="UTF-8"/>
        <!--对资源文件内容缓存时间，单位秒-->
        <property name="cacheSeconds" value="120"/>
    </bean>
    <!--全局异常处理器
        只要实现了HandlerExceptionResolver接口就是全局异常处理器
    -->
    <bean class="cn.xyz.mbs.exception.CustomExceptionResolver"/>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="5242880"/>
    </bean>

    <!--拦截器-->
    <mvc:interceptors>
        <!--多个拦截器，顺序执行-->
        <!--登录认证拦截器-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="cn.xyz.mbs.controller.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <!--/**表示拦截所有url包括子url路径-->
            <mvc:mapping path="/**"/>
            <bean class="cn.xyz.mbs.controller.interceptor.HandlerInterceptor1"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="cn.xyz.mbs.controller.interceptor.HandlerInterceptor2"/>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>